name: DAST Scan - Generic Repo

permissions:
  contents: read
  issues: write

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: "URL du dépôt Git à scanner"
        required: true
        default: "https://github.com/eDr0pko/Analyse_SAST-SCA.git"

jobs:
  dast:
    runs-on: ubuntu-latest

    steps:
      # 1) Cloner le repo cible depuis l'input
      - name: Cloner le dépôt cible
        run: |
          git clone ${{ github.event.inputs.repo_url }} target_repo
          ls -la target_repo

      # 2) Installer Python
      - name: Installer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3) Installer les dépendances Python si elles existent
      - name: Installer les dépendances
        working-directory: target_repo
        run: |
          python3 -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 4) Démarrer un serveur local (si projet statique ou simple)
      - name: Démarrer le serveur
        working-directory: target_repo
        run: |
          nohup python3 -m http.server 8000 & 
          sleep 5

      # 5) Vérifier que le serveur répond
      - name: Vérifier disponibilité
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000)
            echo "Tentative $i -> HTTP $code"
            if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ]; then
              echo "✅ Serveur en ligne"
              exit 0
            fi
            sleep 3
          done
          echo "❌ Le serveur ne répond pas"
          exit 1

      # 6) Scan OWASP ZAP (baseline)
      - name: Scanner avec OWASP ZAP
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "http://127.0.0.1:8000"
          cmd_options: "-a -d"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7) Nettoyage du serveur
      - name: Arrêter le serveur
        if: always()
        run: |
          pkill -f "http.server" || true
